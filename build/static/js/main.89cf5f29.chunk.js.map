{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Persons","persons","search","setPersons","showMessage","notesToShow","filter","person","name","toLowerCase","includes","map","key","number","onClick","window","confirm","personService","console","log","p","catch","error","handleDelete","Notification","message","messageType","className","PersonForm","formHandler","newName","newNumber","handlePersonChange","handleNumberChange","onSubmit","value","onChange","type","Filter","handleSearch","App","useState","setNewName","setNewNumber","setSearch","errorMessage","setErrorMessage","setMessageType","useEffect","initialPersons","setTimeout","modifyPerson","find","modifiedPerson","returnedPerson","event","target","preventDefault","a","newPerson","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89cf5f29.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'api/persons'\n\nconst getAll = () => {  \n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n\n}\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\n\nconst Persons = ({ persons, search, setPersons, showMessage }) => {\n  const notesToShow = persons.filter(person => person.name.toLowerCase().includes(search))\n\n\n  \n\n  const handleDelete = person => {\n    if (window.confirm(`Do you really wanna delete ${person.name}`)){\n      personService.remove(person.id).then((response) => {\n        console.log(\"response data\", response)\n        setPersons(persons.filter(p => p.id !== person.id))\n      }\n      ).catch(error => {\n        showMessage('Error in deleting number', 'error')\n      })\n    }\n  }\n\n  const rows = () => notesToShow.map(person =>\n    <li key={person.name}>\n        {person.name} - {person.number}\n        <button onClick={() => handleDelete(person)}> delete </button>\n    </li>\n  )\n\n  return (\n    <ul>{rows()}</ul>\n  )\n}\n\nconst Notification = ({ message, messageType }) => {\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={messageType}>\n      {message}\n    </div>\n  )\n}\n\nconst PersonForm = ({ formHandler, newName, newNumber, handlePersonChange, handleNumberChange }) => {\n\n\n  return (<form onSubmit={formHandler}>\n    <div>\n      name:\n      <input\n        value={newName}\n        onChange={handlePersonChange} />\n    </div>\n    <div>number:\n      <input\n        value={newNumber}\n        onChange={handleNumberChange} />\n\n    </div>\n\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>)\n}\n\nconst Filter = ({ handleSearch, search }) => {\n  return (\n    <p>\n      Filter shown with:\n    <input onChange={handleSearch} value={search} />\n    </p>)\n}\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [messageType, setMessageType] = useState('success')\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n  const addPerson = () => {\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    personService\n      .create(personObject)\n      .then(newPerson => {\n        setPersons(persons.concat(newPerson))\n        showMessage(`${newName} added`, 'success')\n        setNewName('')\n        setNewNumber('')\n      })\n  }\n\n  const showMessage = (message, type) => {\n    setMessageType(type)\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  }\n\n  const modifyPerson = () => {\n    const confirm = window.confirm(`${newName} is already in phonebook. Replace number?`)\n    if (confirm) {\n      const person = persons.find(p => p.name === newName)\n      const modifiedPerson = { ...person, number: newNumber }\n      personService\n        .update(person.id, modifiedPerson)\n        .then(returnedPerson => {\n          setPersons(persons.map(p => p.id !== person.id ? p : returnedPerson))\n          showMessage(`${newName} edited`, 'success')\n          setNewName('')\n          setNewNumber('')\n        })\n    }\n  }\n\n\n  const formHandler = (event) => {\n    event.preventDefault()\n    if (persons.map(a => a.name).includes(newName)) {\n      modifyPerson()\n    } else {\n      addPerson()\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={errorMessage} messageType={messageType} />\n\n\n      <Filter handleSearch={handleSearch} search={search} />\n\n      <h3>Add new:</h3>\n      <PersonForm\n        formHandler={formHandler}\n        newName={newName}\n        newNumber={newNumber}\n        handlePersonChange={handlePersonChange}\n        handleNumberChange={handleNumberChange}\n\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} search={search} setPersons={setPersons} showMessage={showMessage} />\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}